# - *- coding: utf- 8 - *-
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
import aiohttp
import asyncio
from datetime import datetime, timedelta
import time
import random
import logging

from tgbot.services.sqlite import get_user, update_user_balance_and_refill, get_payments, get_settings, add_refill, add_used_transaction_db, is_transaction_used_db
from tgbot.keyboards.inline_user import refill_inl, user_menu, back_to_user_menu, refill_open_inl, crypto_refill_inl, crypto_refill_polygon_inl, cancel_refill_inl, crypto_refill_waiting_inl, crypto_refill_erc20_inl
from tgbot.utils.translations import get_text, get_user_language
from tgbot.data import config
from tgbot.services.crypto_usdt import CryptoUSDT
from tgbot.utils.crypto_validation import validate_private_key_for_network, validate_all_crypto_keys

# –°–æ–∑–¥–∞—ë–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
router = Router()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π
payment_times = {}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
used_transactions = set()

def add_used_transaction(tx_hash):
    """–î–æ–±–∞–≤–ª—è–µ–º —Ö–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö"""
    used_transactions.add(tx_hash)

def is_transaction_used(tx_hash):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞"""
    return tx_hash in used_transactions

class RefillStates(StatesGroup):
    waiting_amount = State()
    waiting_payment = State()

@router.callback_query(F.data == "refill")
async def refill_menu(call: CallbackQuery, state: FSMContext):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π"""
    await state.clear()
    user_id = call.from_user.id
    lang = get_user_language(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    settings = get_settings()
    if not settings or settings.get('is_refill') != "True":
        await call.answer(get_text(lang, 'refill_disabled'), show_alert=True)
        return
        
    text = get_text(lang, 'choose_payment')
    await call.message.edit_text(text, reply_markup=refill_inl())

@router.callback_query(F.data.startswith("refill:"))
async def process_refill_method(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    user_id = call.from_user.id
    lang = get_user_language(user_id)
    
    method = call.data.split(":")[1]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥
    await state.update_data(refill_method=method)
    await state.set_state(RefillStates.waiting_amount)
    
    text = get_text(lang, 'enter_amount', min_amount=1, max_amount=10000)
    await call.message.edit_text(text, reply_markup=cancel_refill_inl(user_id))

@router.message(RefillStates.waiting_amount)
async def process_refill_amount(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    user_id = message.from_user.id
    lang = get_user_language(user_id)
    
    try:
        amount = float(message.text.replace(',', '.'))
        if amount < 1:
            await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: $1")
            return
        if amount > 10000:
            await message.answer("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: $10,000")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        method = data.get('refill_method')
        
        # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–µ—Ç–æ–¥–∞ —Å–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
        if method == "yoomoney":
            await process_yoomoney_payment(message, state, amount)
        elif method == "lava":
            await process_lava_payment(message, state, amount)
        elif method == "crystal":
            await process_crystal_payment(message, state, amount)
        elif method == "lolz":
            await process_lolz_payment(message, state, amount)
        elif method == "crypto_usdt":
            await process_crypto_payment(message, state, amount)
        elif method == "crypto_usdt_polygon":
            await process_crypto_polygon_payment(message, state, amount)
        elif method == "crypto_usdt_erc20":
            await process_crypto_erc20_payment(message, state, amount)
        else:
            await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã", reply_markup=user_menu(user_id))
            await state.clear()
            
    except (ValueError, AttributeError):
        text = get_text(lang, 'amount_must_be_number')
        await message.answer(text)

async def process_yoomoney_payment(message: Message, state: FSMContext, amount: float):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ÆMoney"""
    user_id = message.from_user.id
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–æ–ª–ª–∞—Ä—ã –≤ —Ä—É–±–ª–∏ (–ø—Ä–∏–º–µ—Ä–Ω—ã–π –∫—É—Ä—Å)
    rub_amount = round(amount * 95, 2)  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π –∫—É—Ä—Å $1 = 95‚ÇΩ
    payment_id = f"yoomoney_{user_id}_{int(amount)}"
    
    text = f"""üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ÆMoney

üí∞ –°—É–º–º–∞: ${amount} (‚âà{rub_amount}‚ÇΩ)
üîó –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∏—Ç—å" –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ

‚è∞ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂"
"""
    
    await message.answer(text, reply_markup=refill_open_inl("yoomoney", amount, f"https://yoomoney.ru/quickpay/confirm.xml?receiver=4100118188797772&quickpay-form=shop&targets=–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ&paymentType=SB&sum={rub_amount}", payment_id))
    await state.clear()

async def process_lava_payment(message: Message, state: FSMContext, amount: float):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ Lava"""
    user_id = message.from_user.id
    
    payment_id = f"lava_{user_id}_{int(amount)}"
    
    text = f"""üåã –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ LavaPay

üí∞ –°—É–º–º–∞: ${amount}
üîó –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∏—Ç—å" –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ

‚è∞ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂"
"""
    
    await message.answer(text, reply_markup=refill_open_inl("lava", amount, f"https://lava.ru/payment/{amount}", payment_id))
    await state.clear()

async def process_crystal_payment(message: Message, state: FSMContext, amount: float):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ CrystalPay"""
    user_id = message.from_user.id
    
    payment_id = f"crystal_{user_id}_{int(amount)}"
    
    text = f"""ü•ù –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ CrystalPay

üí∞ –°—É–º–º–∞: ${amount}
üîó –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∏—Ç—å" –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ

‚è∞ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂"
"""
    
    await message.answer(text, reply_markup=refill_open_inl("crystal", amount, f"https://crystal-pay.com/payment/{amount}", payment_id))
    await state.clear()

async def process_lolz_payment(message: Message, state: FSMContext, amount: float):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ LolzTeam"""
    user_id = message.from_user.id
    
    payment_id = f"lolz_{user_id}_{int(amount)}"
    
    text = f"""‚ö° –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ LolzTeam

üí∞ –°—É–º–º–∞: ${amount}
üîó –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∏—Ç—å" –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ

‚è∞ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂"
"""
    
    await message.answer(text, reply_markup=refill_open_inl("lolz", amount, f"https://lolz.guru/market/balance/add/{amount}", payment_id))
    await state.clear()

async def process_crypto_payment(message: Message, state: FSMContext, amount: float):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ USDT"""
    user_id = message.from_user.id
    lang = get_user_language(user_id)
    
    print(f"\nüí∞ CRYPTO CREATE: –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    print(f"üí∞ –ó–∞–ø—Ä–æ—à–µ–Ω–Ω–∞—è —Å—É–º–º–∞: ${amount}")
    
    # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if not hasattr(config, 'crypto_wallet_address') or not config.crypto_wallet_address or not hasattr(config, 'bscscan_api_key') or not config.bscscan_api_key or not hasattr(config, 'polygonscan_api_key') or not config.polygonscan_api_key or not hasattr(config, 'etherscan_api_key') or not config.etherscan_api_key or not hasattr(config, 'crypto_private_key') or not config.crypto_private_key:
        print(f"‚ùå CRYPTO CREATE: –ö—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        await message.answer("‚ùå –ö—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        await state.clear()
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –¥–ª—è BSC —Å–µ—Ç–∏
    key_validation = validate_private_key_for_network(config.crypto_private_key, 'bsc')
    if not key_validation['valid']:
        print(f"‚ùå CRYPTO CREATE: {key_validation['error']}")
        await message.answer(get_text(lang, 'crypto_config_error'))
        await state.clear()
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–ª–∞—Ç–µ–∂–∞
    payment_id = f"crypto_{user_id}_{int(time.time())}"
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—É–º–º—É —Å –∫–æ–ø–µ–π–∫–∞–º–∏ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    crypto_service = CryptoUSDT(config.crypto_wallet_address, config.crypto_private_key, config.bscscan_api_key, config.polygonscan_api_key, config.etherscan_api_key)
    exact_amount = crypto_service.generate_payment_amount(amount)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
    payment_times[payment_id] = datetime.now()
    print(f"üíæ CRYPTO CREATE: –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤—Ä–µ–º—è –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {payment_times[payment_id]}")
    
    # –¢–µ–∫—Å—Ç —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
    crypto_text = f"""üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ USDT BEP-20

üí∞ –°—É–º–º–∞ –∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é: <code>{exact_amount}</code>
üìç –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:
<code>{config.crypto_wallet_address}</code>

‚ö†Ô∏è –í–ê–ñ–ù–û! –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω–æ <code>{exact_amount}</code> USDT –≤ —Å–µ—Ç–∏ BEP-20
üí° –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ø–µ–π–∫–∏ –Ω—É–∂–Ω—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–∞—à–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞

‚è∞ –í—Ä–µ–º—è –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥: 1 —á–∞—Å
üí∞ –ù–∞ –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–∏—Ç—Å—è –ø–æ–ª–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å –∫–æ–ø–µ–π–∫–∞–º–∏
üîÑ –ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂"

–ü–ª–∞—Ç–µ–∂ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω–∏—Ç—Å—è —á–µ—Ä–µ–∑ 1 —á–∞—Å"""
    
    await message.answer(crypto_text, reply_markup=crypto_refill_inl(exact_amount, payment_id), parse_mode="HTML")
    await state.clear()

async def process_crypto_polygon_payment(message: Message, state: FSMContext, amount: float):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ USDT –≤ —Å–µ—Ç–∏ Polygon"""
    user_id = message.from_user.id
    lang = get_user_language(user_id)
    
    print(f"\nüí∞ CRYPTO POLYGON CREATE: –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞ Polygon –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    print(f"üí∞ –ó–∞–ø—Ä–æ—à–µ–Ω–Ω–∞—è —Å—É–º–º–∞: ${amount}")
    
    # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if not hasattr(config, 'crypto_wallet_address') or not config.crypto_wallet_address or not hasattr(config, 'bscscan_api_key') or not config.bscscan_api_key or not hasattr(config, 'polygonscan_api_key') or not config.polygonscan_api_key or not hasattr(config, 'etherscan_api_key') or not config.etherscan_api_key or not hasattr(config, 'crypto_private_key') or not config.crypto_private_key:
        print(f"‚ùå CRYPTO POLYGON CREATE: –ö—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        await message.answer(get_text(lang, 'crypto_unavailable'))
        await state.clear()
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –¥–ª—è Polygon —Å–µ—Ç–∏
    key_validation = validate_private_key_for_network(config.crypto_private_key, 'polygon')
    if not key_validation['valid']:
        print(f"‚ùå CRYPTO POLYGON CREATE: {key_validation['error']}")
        await message.answer(get_text(lang, 'crypto_config_error'))
        await state.clear()
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–ª–∞—Ç–µ–∂–∞
    payment_id = f"crypto_polygon_{user_id}_{int(time.time())}"
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—É–º–º—É —Å –∫–æ–ø–µ–π–∫–∞–º–∏ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    crypto_service = CryptoUSDT(config.crypto_wallet_address, "", config.bscscan_api_key, config.polygonscan_api_key)
    exact_amount = crypto_service.generate_payment_amount(amount)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
    payment_times[payment_id] = datetime.now()
    print(f"üíæ CRYPTO POLYGON CREATE: –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤—Ä–µ–º—è –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {payment_times[payment_id]}")
    
    # –¢–µ–∫—Å—Ç —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
    crypto_text = f"""üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ USDT Polygon

üí∞ –°—É–º–º–∞ –∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é: <code>{exact_amount}</code>
üìç –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:
<code>{config.crypto_wallet_address}</code>

‚ö†Ô∏è –í–ê–ñ–ù–û! –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω–æ <code>{exact_amount}</code> USDT –≤ —Å–µ—Ç–∏ Polygon
üí° –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ø–µ–π–∫–∏ –Ω—É–∂–Ω—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–∞—à–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞

‚è∞ –í—Ä–µ–º—è –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥: 1 —á–∞—Å
üí∞ –ù–∞ –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–∏—Ç—Å—è –ø–æ–ª–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å –∫–æ–ø–µ–π–∫–∞–º–∏
üîÑ –ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂"

–ü–ª–∞—Ç–µ–∂ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω–∏—Ç—Å—è —á–µ—Ä–µ–∑ 1 —á–∞—Å"""
    
    await message.answer(crypto_text, reply_markup=crypto_refill_polygon_inl(exact_amount, payment_id), parse_mode="HTML")
    await state.clear()

@router.callback_query(F.data.startswith("check_opl:"))
async def check_payment(call: CallbackQuery):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ã—á–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π (–Ω–µ –∫—Ä–∏–ø—Ç–æ)"""
    user_id = call.from_user.id
    lang = get_user_language(user_id)
    
    await call.answer(get_text(lang, 'payment_check'), show_alert=True)

async def check_usdt_transaction(wallet_address, amount, api_key, payment_time, time_limit_hours=1):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ USDT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ BSCScan API"""
    try:
        if not wallet_address or not api_key:
            print(f"‚ùå CRYPTO DEBUG: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
            return {'found': False, 'error': 'Configuration error'}
        
        # USDT –∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–∞ BSC
        usdt_contract = "0x55d398326f99059ff775485246999027b3197955"
        
        payment_timestamp = int(payment_time.timestamp())
        start_time = payment_timestamp - 600  # 10 –º–∏–Ω—É—Ç –±—É—Ñ–µ—Ä
        end_time = payment_timestamp + (time_limit_hours * 3600)
        current_time = int(time.time())
        
        print(f"\nüîç CRYPTO DEBUG: –ü—Ä–æ–≤–µ—Ä–∫–∞ USDT —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
        print(f"üí∞ –û–∂–∏–¥–∞–µ–º–∞—è —Å—É–º–º–∞: ${amount}")
        print(f"üí≥ –ö–æ—à–µ–ª–µ–∫: {wallet_address}")
        
        if current_time > end_time:
            print(f"‚ùå CRYPTO DEBUG: –í—Ä–µ–º—è –ø–ª–∞—Ç–µ–∂–∞ –∏—Å—Ç–µ–∫–ª–æ")
            return {'found': False, 'error': 'Payment time expired'}
        
        url = f"https://api.bscscan.com/api"
        params = {
            'module': 'account',
            'action': 'tokentx',
            'contractaddress': usdt_contract,
            'address': wallet_address,
            'startblock': 0,
            'endblock': 999999999,
            'sort': 'desc',
            'apikey': api_key
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.get(url, params=params) as response:
                print(f"üì° BSCScan —Å—Ç–∞—Ç—É—Å: {response.status}")
                
                if response.status == 200:
                    data = await response.json()
                    
                    if data['status'] == '1' and data['result']:
                        transactions = data['result']
                        print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
                        
                        for i, tx in enumerate(transactions):
                            if i >= 10:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
                                break
                                
                            if tx['to'].lower() == wallet_address.lower():
                                tx_time = int(tx['timeStamp'])
                                if start_time <= tx_time <= end_time:
                                    if is_transaction_used_db(tx['hash']):
                                        continue
                                    
                                    tx_amount = float(tx['value']) / (10**18)
                                    
                                    if abs(tx_amount - amount) < 0.001:
                                        print(f"‚úÖ –ù–ê–ô–î–ï–ù–ê –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø: {tx['hash']}")
                                        return {
                                            'found': True,
                                            'hash': tx['hash'],
                                            'amount': tx_amount,
                                            'from': tx['from'],
                                            'timestamp': tx_time
                                        }
                    
                    return {'found': False, 'error': None}
                else:
                    return {'found': False, 'error': f'BSCScan API error: {response.status}'}
                    
    except Exception as e:
        print(f"üí• CRYPTO DEBUG: –û—à–∏–±–∫–∞: {str(e)}")
        return {'found': False, 'error': str(e)}

async def check_usdt_transaction_polygon(wallet_address, amount, api_key, payment_time, time_limit_hours=1):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π USDT –≤ —Å–µ—Ç–∏ Polygon —á–µ—Ä–µ–∑ Polygonscan API"""
    try:
        print(f"üîç POLYGON CHECK: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è {wallet_address}")
        print(f"üí∞ –û–∂–∏–¥–∞–µ–º–∞—è —Å—É–º–º–∞: {amount} USDT")
        
        start_time = int(payment_time.timestamp()) - 300  # 5 –º–∏–Ω—É—Ç –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
        end_time = int(time.time()) + 300  # 5 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        
        url = "https://api.polygonscan.com/api"
        params = {
            'module': 'account',
            'action': 'tokentx',
            'contractaddress': '0xc2132D05D31c914a87C6611C10748AEb04B58e8F',  # USDT Polygon contract
            'address': wallet_address,
            'page': 1,
            'offset': 100,
            'startblock': 0,
            'endblock': 99999999,
            'sort': 'desc',
            'apikey': api_key
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.get(url, params=params) as response:
                print(f"üì° POLYGON API: –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status}")
                
                if response.status == 200:
                    data = await response.json()
                    
                    if data['status'] == '1' and data['result']:
                        transactions = data['result']
                        print(f"üìã POLYGON: –ù–∞–π–¥–µ–Ω–æ {len(transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
                        
                        for i, tx in enumerate(transactions):
                            if i >= 10:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
                                break
                                
                            if tx['to'].lower() == wallet_address.lower():
                                tx_time = int(tx['timeStamp'])
                                if start_time <= tx_time <= end_time:
                                    if is_transaction_used_db(tx['hash']):
                                        continue
                                    
                                    tx_amount = float(tx['value']) / (10**18)
                                    
                                    if abs(tx_amount - amount) < 0.001:
                                        print(f"‚úÖ POLYGON: –ù–ê–ô–î–ï–ù–ê –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø: {tx['hash']}")
                                        return {
                                            'found': True,
                                            'hash': tx['hash'],
                                            'amount': tx_amount,
                                            'from': tx['from'],
                                            'timestamp': tx_time
                                        }
                    
                    return {'found': False, 'error': None}
                else:
                    return {'found': False, 'error': f'Polygonscan API error: {response.status}'}
                    
    except Exception as e:
        print(f"üí• POLYGON DEBUG: –û—à–∏–±–∫–∞: {str(e)}")
        return {'found': False, 'error': str(e)}

@router.callback_query(F.data.startswith("check_crypto:"))
async def check_crypto_payment(call: CallbackQuery):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞"""
    user_id = call.from_user.id
    
    data = call.data.split(":")
    amount = float(data[1])
    payment_id = data[2]
    
    print(f"\nüöÄ CRYPTO CHECK: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–ª–∞—Ç–µ–∂ ${amount}")
    
    if payment_id not in payment_times:
        await call.message.edit_text(
            "‚ùå –î–∞–Ω–Ω—ã–µ –æ –ø–ª–∞—Ç–µ–∂–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂.",
            reply_markup=user_menu(user_id)
        )
        return
    
    payment_time = payment_times[payment_id]
    current_time = datetime.now()
    
    if current_time - payment_time > timedelta(hours=1):
        await call.message.edit_text(
            "‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –∏—Å—Ç–µ–∫–ª–æ (1 —á–∞—Å)\n\n‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω.",
            reply_markup=user_menu(user_id)
        )
        del payment_times[payment_id]
        return
    
    await call.message.edit_text(
        "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫—á–µ–π–Ω —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...",
        reply_markup=crypto_refill_waiting_inl(amount, payment_id)
    )
    
    # –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –∑–∞–≥–ª—É—à–∫–∞ –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API
    if hasattr(config, 'bscscan_api_key') and config.bscscan_api_key:
        result = await check_usdt_transaction(
            wallet_address=config.crypto_wallet_address,
            amount=amount,
            api_key=config.bscscan_api_key,
            payment_time=payment_time,
            time_limit_hours=1
        )
    else:
        result = {'found': False, 'error': 'BSCScan API key not configured'}
    
    if result['found']:
        # –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞
        user = get_user(id=user_id)
        # –ó–∞—á–∏—Å–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Å—É–º–º—É –±–µ–∑ –∫–æ–ø–µ–µ–∫
        original_amount = amount - (amount % 1)  # –£–±–∏—Ä–∞–µ–º –∫–æ–ø–µ–π–∫–∏
        new_balance = update_user_balance_and_refill(user_id, original_amount)
        
        add_used_transaction_db(result['hash'], user_id, original_amount)
        add_refill(
            amount=original_amount,
            way="USDT BEP-20", 
            user_id=user_id,
            user_name=user.get('user_name', ''),
            first_name=user.get('first_name', ''),
            comment=f"USDT BEP-20 - {result['hash'][:10]}..."
        )
        
        del payment_times[payment_id]
        
        success_text = f"""‚úÖ –ö—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!

üí∞ –ó–∞—á–∏—Å–ª–µ–Ω–æ: ${original_amount} USDT
üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: ${new_balance}

–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ!"""
        
        await call.message.edit_text(success_text, reply_markup=user_menu(user_id))
        
    elif result['error']:
        await call.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {result['error']}\n\nüîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
            reply_markup=crypto_refill_waiting_inl(amount, payment_id)
        )
    else:
        remaining_time = ""
        elapsed = datetime.now() - payment_time
        remaining = timedelta(hours=1) - elapsed
        if remaining.total_seconds() > 0:
            minutes = int(remaining.total_seconds() / 60)
            remaining_time = f"\n‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {minutes} –º–∏–Ω—É—Ç"
        
        await call.message.edit_text(
            f"üîç –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n\nüí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:\n‚Ä¢ –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ç–æ—á–Ω–æ ${amount} USDT\n‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Å–µ—Ç—å BEP-20 (BSC){remaining_time}",
            reply_markup=crypto_refill_waiting_inl(amount, payment_id)
        )

@router.callback_query(F.data.startswith("check_crypto_again:"))
async def check_crypto_again(call: CallbackQuery):
    """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞"""
    user_id = call.from_user.id
    
    data = call.data.split(":")
    amount = float(data[1])
    payment_id = data[2]
    
    if payment_id not in payment_times:
        await call.message.edit_text(
            "‚ùå –î–∞–Ω–Ω—ã–µ –æ –ø–ª–∞—Ç–µ–∂–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
            reply_markup=user_menu(user_id)
        )
        return
    
    payment_time = payment_times[payment_id]
    if datetime.now() - payment_time > timedelta(hours=1):
        await call.message.edit_text(
            "‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –∏—Å—Ç–µ–∫–ª–æ (1 —á–∞—Å)",
            reply_markup=user_menu(user_id)
        )
        del payment_times[payment_id]
        return
    
    await call.answer("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞...", show_alert=True)
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ API
    await check_crypto_payment(call)

@router.callback_query(F.data.startswith("cancel_crypto_waiting:"))
async def cancel_crypto_waiting(call: CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ –æ–∂–∏–¥–∞–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞"""
    user_id = call.from_user.id
    
    data = call.data.split(":")
    payment_id = data[1] if len(data) > 1 else None
    
    if payment_id and payment_id in payment_times:
        del payment_times[payment_id]
    
    await call.message.edit_text(
        "‚ùå –û–∂–∏–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=user_menu(user_id)
    )

@router.callback_query(F.data.startswith("cancel_crypto:"))
async def cancel_crypto_payment(call: CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞"""
    user_id = call.from_user.id
    
    data = call.data.split(":")
    payment_id = data[1] if len(data) > 1 else None
    
    if payment_id and payment_id in payment_times:
        del payment_times[payment_id]
    
    await call.message.edit_text(
        "‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω",
        reply_markup=user_menu(user_id)
    )

@router.callback_query(F.data == "cancel_refill")
async def cancel_refill_state(call: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    await state.clear()
    user_id = call.from_user.id
    
    await call.message.edit_text(
        "‚ùå –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=user_menu(user_id)
    )

@router.callback_query(F.data.startswith("check_crypto_polygon:"))
async def check_crypto_polygon_payment(call: CallbackQuery):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞ –≤ —Å–µ—Ç–∏ Polygon"""
    user_id = call.from_user.id
    lang = get_user_language(user_id)
    
    data = call.data.split(":")
    amount = float(data[1])
    payment_id = data[2]
    
    print(f"\nüöÄ POLYGON CHECK: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–ª–∞—Ç–µ–∂ ${amount}")
    
    if payment_id not in payment_times:
        await call.message.edit_text(
            get_text(lang, 'crypto_payment_not_found'),
            reply_markup=user_menu(user_id)
        )
        return
    
    payment_time = payment_times[payment_id]
    current_time = datetime.now()
    
    if current_time - payment_time > timedelta(hours=1):
        await call.message.edit_text(
            get_text(lang, 'crypto_payment_expired'),
            reply_markup=user_menu(user_id)
        )
        del payment_times[payment_id]
        return
    
    await call.message.edit_text(
        get_text(lang, 'crypto_checking_blockchain'),
        reply_markup=crypto_refill_waiting_inl(amount, payment_id)
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ Polygonscan API
    if hasattr(config, 'polygonscan_api_key') and config.polygonscan_api_key:
        result = await check_usdt_transaction_polygon(
            wallet_address=config.crypto_wallet_address,
            amount=amount,
            api_key=config.polygonscan_api_key,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è Polygon
            payment_time=payment_time,
            time_limit_hours=1
        )
    else:
        result = {'found': False, 'error': 'Polygonscan API key not configured'}
    
    if result['found']:
        # –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞
        user = get_user(id=user_id)
        # –ó–∞—á–∏—Å–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Å—É–º–º—É –±–µ–∑ –∫–æ–ø–µ–µ–∫
        original_amount = amount - (amount % 1)  # –£–±–∏—Ä–∞–µ–º –∫–æ–ø–µ–π–∫–∏
        new_balance = update_user_balance_and_refill(user_id, original_amount)
        
        add_used_transaction_db(result['hash'], user_id, original_amount)
        add_refill(
            amount=original_amount,
            way="USDT Polygon", 
            user_id=user_id,
            user_name=user.get('user_name', ''),
            first_name=user.get('first_name', ''),
            comment=f"USDT Polygon - {result['hash'][:10]}..."
        )
        
        del payment_times[payment_id]
        
        success_text = get_text(lang, 'crypto_payment_confirmed', amount=original_amount, new_balance=new_balance)
        
        await call.message.edit_text(success_text, reply_markup=user_menu(user_id))
        
    elif result['error']:
        await call.message.edit_text(
            get_text(lang, 'crypto_check_error', error=result['error']),
            reply_markup=crypto_refill_waiting_inl(amount, payment_id)
        )
    else:
        remaining_time = ""
        elapsed = datetime.now() - payment_time
        remaining = timedelta(hours=1) - elapsed
        if remaining.total_seconds() > 0:
            minutes = int(remaining.total_seconds() / 60)
            remaining_time = f"\n‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {minutes} –º–∏–Ω—É—Ç"
        
        await call.message.edit_text(
            get_text(lang, 'crypto_transaction_not_found_polygon', amount=amount, remaining_time=remaining_time),
            reply_markup=crypto_refill_waiting_inl(amount, payment_id)
        )

@router.callback_query(F.data.startswith("check_crypto_erc20:"))
async def check_crypto_erc20_payment(call: CallbackQuery):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞ –≤ —Å–µ—Ç–∏ ERC-20"""
    user_id = call.from_user.id
    lang = get_user_language(user_id)
    
    data = call.data.split(":")
    amount = float(data[1])
    payment_id = data[2]
    
    print(f"\nüöÄ ERC-20 CHECK: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–ª–∞—Ç–µ–∂ ${amount}")
    
    if payment_id not in payment_times:
        await call.message.edit_text(
            get_text(lang, 'crypto_payment_not_found'),
            reply_markup=user_menu(user_id)
        )
        return
    
    payment_time = payment_times[payment_id]
    current_time = datetime.now()
    
    if current_time - payment_time > timedelta(hours=1):
        await call.message.edit_text(
            get_text(lang, 'crypto_payment_expired'),
            reply_markup=user_menu(user_id)
        )
        del payment_times[payment_id]
        return
    
    await call.message.edit_text(
        get_text(lang, 'crypto_checking_blockchain'),
        reply_markup=crypto_refill_waiting_inl(amount, payment_id)
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ Etherscan API
    if hasattr(config, 'etherscan_api_key') and config.etherscan_api_key:
        result = await check_usdt_transaction_erc20(
            wallet_address=config.crypto_wallet_address,
            amount=amount,
            api_key=config.etherscan_api_key,
            payment_time=payment_time,
            time_limit_hours=1
        )
    else:
        result = {'found': False, 'error': 'Etherscan API key not configured'}
    
    if result['found']:
        # –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞
        user = get_user(id=user_id)
        # –ó–∞—á–∏—Å–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Å—É–º–º—É –±–µ–∑ –∫–æ–ø–µ–µ–∫
        original_amount = amount - (amount % 1)  # –£–±–∏—Ä–∞–µ–º –∫–æ–ø–µ–π–∫–∏
        new_balance = update_user_balance_and_refill(user_id, original_amount)
        
        add_used_transaction_db(result['hash'], user_id, original_amount)
        add_refill(
            amount=original_amount,
            way="USDT ERC-20", 
            user_id=user_id,
            user_name=user.get('user_name', ''),
            first_name=user.get('first_name', ''),
            comment=f"USDT ERC-20 - {result['hash'][:10]}..."
        )
        
        del payment_times[payment_id]
        
        success_text = get_text(lang, 'crypto_payment_confirmed', amount=original_amount, new_balance=new_balance)
        
        await call.message.edit_text(success_text, reply_markup=user_menu(user_id))
        
    elif result['error']:
        await call.message.edit_text(
            get_text(lang, 'crypto_check_error', error=result['error']),
            reply_markup=crypto_refill_waiting_inl(amount, payment_id)
        )
    else:
        remaining_time = ""
        elapsed = datetime.now() - payment_time
        remaining = timedelta(hours=1) - elapsed
        if remaining.total_seconds() > 0:
            minutes = int(remaining.total_seconds() / 60)
            remaining_time = f"\n‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {minutes} –º–∏–Ω—É—Ç"
        
        await call.message.edit_text(
            get_text(lang, 'crypto_transaction_not_found_erc20', amount=amount, remaining_time=remaining_time),
            reply_markup=crypto_refill_waiting_inl(amount, payment_id)
        )

async def process_crypto_erc20_payment(message: Message, state: FSMContext, amount: float):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ USDT –≤ —Å–µ—Ç–∏ ERC-20"""
    user_id = message.from_user.id
    lang = get_user_language(user_id)
    
    print(f"\nüí∞ CRYPTO ERC-20 CREATE: –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞ ERC-20 –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    print(f"üí∞ –ó–∞–ø—Ä–æ—à–µ–Ω–Ω–∞—è —Å—É–º–º–∞: ${amount}")
    
    # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if not hasattr(config, 'crypto_wallet_address') or not config.crypto_wallet_address or not hasattr(config, 'bscscan_api_key') or not config.bscscan_api_key or not hasattr(config, 'polygonscan_api_key') or not config.polygonscan_api_key or not hasattr(config, 'etherscan_api_key') or not config.etherscan_api_key or not hasattr(config, 'crypto_private_key') or not config.crypto_private_key:
        print(f"‚ùå CRYPTO ERC-20 CREATE: –ö—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        await message.answer(get_text(lang, 'crypto_unavailable'))
        await state.clear()
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –¥–ª—è ERC-20 —Å–µ—Ç–∏
    key_validation = validate_private_key_for_network(config.crypto_private_key, 'erc20')
    if not key_validation['valid']:
        print(f"‚ùå CRYPTO ERC-20 CREATE: {key_validation['error']}")
        await message.answer(get_text(lang, 'crypto_config_error'))
        await state.clear()
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–ª–∞—Ç–µ–∂–∞
    payment_id = f"crypto_erc20_{user_id}_{int(time.time())}"
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—É–º–º—É —Å –∫–æ–ø–µ–π–∫–∞–º–∏ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    crypto_service = CryptoUSDT(config.crypto_wallet_address, config.crypto_private_key, config.bscscan_api_key, config.polygonscan_api_key, config.etherscan_api_key)
    exact_amount = crypto_service.generate_payment_amount(amount)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
    payment_times[payment_id] = datetime.now()
    print(f"üíæ CRYPTO ERC-20 CREATE: –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤—Ä–µ–º—è –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {payment_times[payment_id]}")
    
    # –¢–µ–∫—Å—Ç —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
    crypto_text = f"""üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ USDT ERC-20

üí∞ –°—É–º–º–∞ –∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é: <code>{exact_amount}</code>
üìç –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:
<code>{config.crypto_wallet_address}</code>

‚ö†Ô∏è –í–ê–ñ–ù–û! –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω–æ <code>{exact_amount}</code> USDT –≤ —Å–µ—Ç–∏ ERC-20
üí° –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ø–µ–π–∫–∏ –Ω—É–∂–Ω—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–∞—à–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞

‚è∞ –í—Ä–µ–º—è –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥: 1 —á–∞—Å
üí∞ –ù–∞ –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–∏—Ç—Å—è –ø–æ–ª–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å –∫–æ–ø–µ–π–∫–∞–º–∏
üîÑ –ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂"

–ü–ª–∞—Ç–µ–∂ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω–∏—Ç—Å—è —á–µ—Ä–µ–∑ 1 —á–∞—Å"""
    
    await message.answer(crypto_text, reply_markup=crypto_refill_erc20_inl(exact_amount, payment_id), parse_mode="HTML")
    await state.clear()

async def check_usdt_transaction_erc20(wallet_address, amount, api_key, payment_time, time_limit_hours=1):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π USDT –≤ —Å–µ—Ç–∏ Ethereum —á–µ—Ä–µ–∑ Etherscan API"""
    try:
        print(f"üîç ERC-20 CHECK: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è {wallet_address}")
        print(f"üí∞ –û–∂–∏–¥–∞–µ–º–∞—è —Å—É–º–º–∞: {amount} USDT")
        
        start_time = int(payment_time.timestamp()) - 300  # 5 –º–∏–Ω—É—Ç –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
        end_time = int(time.time()) + 300  # 5 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        
        url = "https://api.etherscan.io/api"
        params = {
            'module': 'account',
            'action': 'tokentx',
            'contractaddress': '0xdAC17F958D2ee523a2206206994597C13D831ec7',  # USDT ERC-20 contract
            'address': wallet_address,
            'page': 1,
            'offset': 100,
            'startblock': 0,
            'endblock': 99999999,
            'sort': 'desc',
            'apikey': api_key
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.get(url, params=params) as response:
                print(f"üì° ERC-20 API: –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status}")
                
                if response.status == 200:
                    data = await response.json()
                    
                    if data['status'] == '1' and data['result']:
                        transactions = data['result']
                        print(f"üìã ERC-20: –ù–∞–π–¥–µ–Ω–æ {len(transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
                        
                        for i, tx in enumerate(transactions):
                            if i >= 10:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
                                break
                                
                            if tx['to'].lower() == wallet_address.lower():
                                tx_time = int(tx['timeStamp'])
                                if start_time <= tx_time <= end_time:
                                    if is_transaction_used_db(tx['hash']):
                                        continue
                                    
                                    tx_amount = float(tx['value']) / (10**18)
                                    
                                    if abs(tx_amount - amount) < 0.001:
                                        print(f"‚úÖ ERC-20: –ù–ê–ô–î–ï–ù–ê –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø: {tx['hash']}")
                                        return {
                                            'found': True,
                                            'hash': tx['hash'],
                                            'amount': tx_amount,
                                            'from': tx['from'],
                                            'timestamp': tx_time
                                        }
                    
                    return {'found': False, 'error': None}
                else:
                    return {'found': False, 'error': f'Etherscan API error: {response.status}'}
                    
    except Exception as e:
        print(f"üí• ERC-20 DEBUG: –û—à–∏–±–∫–∞: {str(e)}")
        return {'found': False, 'error': str(e)} 