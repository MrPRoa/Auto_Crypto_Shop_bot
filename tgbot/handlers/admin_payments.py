# - *- coding: utf- 8 - *-
import asyncio

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from tgbot.services.sqlite import get_payments, update_payments
from tgbot.utils.utils_functions import ots
from tgbot.keyboards.inline_admin import payments_settings_info, payments_settings, payments_back
from tgbot.filters.is_admin import IsAdmin
from tgbot.data import config
from tgbot.utils.translations import get_text

# –°–æ–∑–¥–∞—ë–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
router = Router()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
qiwi_text = "ü•ù QIWI"
yoomoney_text = "üí≥ –ÆMoney"
lava_text = "üåã LavaPay"
lzt_text = "‚ö° LolzTeam"
crystalPay_text = "üíé Crystal Pay"

@router.callback_query(IsAdmin(), F.data == 'payments')
async def payments_settings_choose(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.edit_text("<b>‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</b>", reply_markup=payments_settings())

@router.callback_query(IsAdmin(), F.data.startswith("payments:"))
async def payments_info(call: CallbackQuery, state: FSMContext):
    await state.clear()
    way = call.data.split(":")[1]

    def pay_info(way, status):
        if status == "True":
            status = "‚úÖ –í–∫–ª—é—á–µ–Ω"
        elif status == "False":
            status = "‚ùå –í—ã–∫–ª—é—á–µ–Ω"

        msg = f"""
<b>{way}

–°—Ç–∞—Ç—É—Å: <code>{status}</code></b>        
"""
        return ots(msg)

    if way == "qiwi":
        ways = qiwi_text
        status = get_payments()['pay_qiwi']
        await call.message.edit_text(pay_info(ways, status), reply_markup=payments_settings_info(way, status))
    elif way == "yoomoney":
        ways = yoomoney_text
        status = get_payments()['pay_yoomoney']
        await call.message.edit_text(pay_info(ways, status), reply_markup=payments_settings_info(way, status))
    elif way == "lava":
        ways = lava_text
        status = get_payments()['pay_lava']
        await call.message.edit_text(pay_info(ways, status), reply_markup=payments_settings_info(way, status))
    elif way == "lzt":
        ways = lzt_text
        status = get_payments()['pay_lolz']
        await call.message.edit_text(pay_info(ways, status), reply_markup=payments_settings_info(way, status))
    elif way == "crystalPay":
        ways = crystalPay_text
        status = get_payments()['pay_crystal']
        await call.message.edit_text(pay_info(ways, status), reply_markup=payments_settings_info(way, status))

@router.callback_query(IsAdmin(), F.data.startswith("payments_on_off:"))
async def off_payments(call: CallbackQuery, state: FSMContext):
    way = call.data.split(":")[1]
    action = call.data.split(":")[2]

    def pay_info(way, status):
        if status == "True":
            status = "‚úÖ –í–∫–ª—é—á–µ–Ω"
        elif status == "False":
            status = "‚ùå –í—ã–∫–ª—é—á–µ–Ω"

        msg = f"""
<b>{way}

–°—Ç–∞—Ç—É—Å: <code>{status}</code></b>        
"""
        return ots(msg)

    if way == "qiwi":
        ways = qiwi_text
        if action == "off":
            update_payments(pay_qiwi="False")
        else:
            update_payments(pay_qiwi="True")
        status = get_payments()['pay_qiwi']
        await call.message.edit_text(pay_info(ways, status), reply_markup=payments_settings_info(way, status))
    elif way == "yoomoney":
        ways = yoomoney_text
        if action == "off":
            update_payments(pay_yoomoney="False")
        else:
            update_payments(pay_yoomoney="True")
        status = get_payments()['pay_yoomoney']
        await call.message.edit_text(pay_info(ways, status), reply_markup=payments_settings_info(way, status))
    elif way == "lava":
        ways = lava_text
        if action == "off":
            update_payments(pay_lava="False")
        else:
            update_payments(pay_lava="True")
        status = get_payments()['pay_lava']
        await call.message.edit_text(pay_info(ways, status), reply_markup=payments_settings_info(way, status))
    elif way == "lzt":
        ways = lzt_text
        if action == "off":
            update_payments(pay_lolz="False")
        else:
            update_payments(pay_lolz="True")
        status = get_payments()['pay_lolz']
        await call.message.edit_text(pay_info(ways, status), reply_markup=payments_settings_info(way, status))
    elif way == "crystalPay":
        ways = crystalPay_text
        if action == "off":
            update_payments(pay_crystal="False")
        else:
            update_payments(pay_crystal="True")
        status = get_payments()['pay_crystal']
        await call.message.edit_text(pay_info(ways, status), reply_markup=payments_settings_info(way, status))

@router.callback_query(IsAdmin(), F.data.startswith("payments_balance:"))
async def payments_balance_call(call: CallbackQuery, state: FSMContext):
    await state.clear()
    way = call.data.split(":")[1]

    if way == "qiwi":
        ways = qiwi_text
        try:
            # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Qiwi –∫–ª–∞—Å—Å
            # qiwi = Qiwi(config.qiwi_token, config.qiwi_login, config.qiwi_secret)
            # balance = await qiwi.get_balance(config.qiwi_login)
            balance = "–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ QIWI –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
            await call.message.edit_text(f"{ways} \n\n{balance}", reply_markup=payments_back())
        except Exception as e:
            await call.message.edit_text(f"{ways} \n\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {str(e)}", reply_markup=payments_back())

    elif way == "yoomoney":
        ways = yoomoney_text
        try:
            # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å YooMoney –∫–ª–∞—Å—Å
            # yoo = YooMoney(config.yoomoney_token, config.yoomoney_number)
            # balance = yoo.get_balance()
            balance = "–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ÆMoney –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
            await call.message.edit_text(f"{ways} \n\n<code>{balance}</code>", reply_markup=payments_back())
        except Exception as e:
            await call.message.edit_text(f"{ways} \n\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {str(e)}", reply_markup=payments_back())

    elif way == "crystalPay":
        ways = crystalPay_text
        try:
            # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å CrystalPay –∫–ª–∞—Å—Å
            # crystal = CrystalPay(config.crystal_Cassa, config.crystal_Token)
            # balance = await crystal.get_balance()
            balance = "–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ CrystalPay –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
            await call.message.edit_text(f"{ways} \n\n{balance}", reply_markup=payments_back())
        except Exception as e:
            await call.message.edit_text(f"{ways} \n\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {str(e)}", reply_markup=payments_back())

    elif way == "lzt":
        ways = lzt_text
        try:
            # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Lolz –∫–ª–∞—Å—Å
            # lzt = Lolz(config.lolz_token)
            # await asyncio.sleep(3)
            # data = await lzt.get_user()
            # balance = data['balance']
            # hold = data['hold']
            balance = "–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ LolzTeam –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
            await call.message.edit_text(f'{ways} \n\n{balance}', reply_markup=payments_back())
        except Exception as e:
            await call.message.edit_text(f'{ways} \n\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {str(e)}', reply_markup=payments_back())

    elif way == "lava":
        ways = lava_text
        try:
            # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Lava –∫–ª–∞—Å—Å
            # lava = Lava(config.lava_project_id, config.lava_secret_key)
            # balance = await lava.get_balance()
            balance = "–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ LavaPay –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
            await call.message.edit_text(f"{ways} \n\n{balance}", reply_markup=payments_back())
        except Exception as e:
            await call.message.edit_text(f"{ways} \n\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {str(e)}", reply_markup=payments_back())

@router.callback_query(IsAdmin(), F.data.startswith("payments_info:"))
async def payments_info_open(call: CallbackQuery, state: FSMContext):
    await state.clear()
    way = call.data.split(":")[1]

    if way == "qiwi":
        ways = qiwi_text
        qiwi_login = getattr(config, 'qiwi_login', '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
        qiwi_token = getattr(config, 'qiwi_token', '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
        qiwi_secret = getattr(config, 'qiwi_secret', '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
        await call.message.edit_text(f"{ways} \n\n–ù–æ–º–µ—Ä: <code>{qiwi_login}</code> \n–¢–æ–∫–µ–Ω: <code>{qiwi_token}</code> \n–°–µ–∫—Ä–µ—Ç–Ω—ã–π p2p-–∫–ª—é—á: <code>{qiwi_secret}</code>", reply_markup=payments_back())

    elif way == "crystalPay":
        ways = crystalPay_text
        crystal_cassa = getattr(config, 'crystal_Cassa', '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
        crystal_token = getattr(config, 'crystal_Token', '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
        await call.message.edit_text(f"{ways} \n\n–õ–æ–≥–∏–Ω –∫–∞—Å—Å—ã: <code>{crystal_cassa}</code> \n–°–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω 1: <code>{crystal_token}</code>", reply_markup=payments_back())

    elif way == "yoomoney":
        ways = yoomoney_text
        yoomoney_token = getattr(config, 'yoomoney_token', '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
        yoomoney_number = getattr(config, 'yoomoney_number', '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
        await call.message.edit_text(f"{ways} \n\n–¢–æ–∫–µ–Ω: <code>{yoomoney_token}</code> \n–ù–æ–º–µ—Ä: <code>{yoomoney_number}</code>", reply_markup=payments_back())
    
    elif way == "lzt":
        ways = lzt_text
        lolz_token = getattr(config, 'lolz_token', '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
        lolz_nick = getattr(config, 'lolz_nick', '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
        lolz_id = getattr(config, 'lolz_id', '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
        await call.message.edit_text(f"{ways} \n\n–¢–æ–∫–µ–Ω: <code>{lolz_token}</code> \n–ù–∏–∫: <code>{lolz_nick}</code> \nID: <code>{lolz_id}</code>", reply_markup=payments_back())
    
    elif way == "lava":
        ways = lava_text
        lava_project_id = getattr(config, 'lava_project_id', '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
        lava_secret_key = getattr(config, 'lava_secret_key', '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
        await call.message.edit_text(f"{ways} \n\nID –ü—Ä–æ–µ–∫—Ç–∞: <code>{lava_project_id}</code> \n–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á: <code>{lava_secret_key}</code>", reply_markup=payments_back()) 